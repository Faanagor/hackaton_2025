"""attendance table has a new name, fixing bugs

Revision ID: e142cab43594
Revises: 5eae0624e532
Create Date: 2025-10-25 04:29:11.597629

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e142cab43594"
down_revision: Union[str, Sequence[str], None] = "5eae0624e532"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_attendance_id"), table_name="attendance")
    op.drop_index(op.f("ix_attendance_timestamp"), table_name="attendance")
    op.drop_index(op.f("ix_attendance_worker_timestamp"), table_name="attendance")
    op.drop_table("attendance")
    op.drop_table("attendance_records")
    op.drop_table("workers")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "workers",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('workers_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("uuid", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "face_embedding", postgresql.BYTEA(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="workers_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "attendance_records",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uuid", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("worker_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "confidence",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("device_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "synced_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
            name=op.f("attendance_records_worker_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("attendance_records_pkey")),
    )
    op.create_table(
        "attendance",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uuid", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("worker_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "type",
            postgresql.ENUM("IN", "OUT", name="attendance_type_enum"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "confidence",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("device_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "synced_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
            name=op.f("attendance_worker_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("attendance_pkey")),
        sa.UniqueConstraint(
            "uuid",
            name=op.f("attendance_uuid_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("ix_attendance_worker_timestamp"),
        "attendance",
        ["worker_id", "timestamp"],
        unique=False,
    )
    op.create_index(
        op.f("ix_attendance_timestamp"), "attendance", ["timestamp"], unique=False
    )
    op.create_index(op.f("ix_attendance_id"), "attendance", ["id"], unique=False)
    # ### end Alembic commands ###
