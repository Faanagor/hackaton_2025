"""initial migration

Revision ID: 5eae0624e532
Revises:
Create Date: 2025-10-25 03:22:33.754654

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "5eae0624e532"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_attendance_records_id"), table_name="attendance_records")
    op.drop_index(
        op.f("ix_attendance_records_timestamp"), table_name="attendance_records"
    )
    op.drop_index(op.f("ix_attendance_records_uuid"), table_name="attendance_records")
    op.drop_index(op.f("ix_workers_id"), table_name="workers")
    op.drop_index(op.f("ix_workers_uuid"), table_name="workers")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "workers",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('workers_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("uuid", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "face_embedding", postgresql.BYTEA(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="workers_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(op.f("ix_workers_uuid"), "workers", ["uuid"], unique=True)
    op.create_index(op.f("ix_workers_id"), "workers", ["id"], unique=False)
    op.create_table(
        "attendance_records",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uuid", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("worker_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "confidence",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("device_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "synced_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
            name=op.f("attendance_records_worker_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("attendance_records_pkey")),
    )
    op.create_index(
        op.f("ix_attendance_records_uuid"), "attendance_records", ["uuid"], unique=True
    )
    op.create_index(
        op.f("ix_attendance_records_timestamp"),
        "attendance_records",
        ["timestamp"],
        unique=False,
    )
    op.create_index(
        op.f("ix_attendance_records_id"), "attendance_records", ["id"], unique=False
    )
    # ### end Alembic commands ###
